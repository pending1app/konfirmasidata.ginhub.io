// Script Proteksi Tinggi terhadap Bot dan Pemblokiran
(function () {
  console.log("Proteksi.Aktif");

  // **1. Dynamic Content Loading (Obfuscation & Runtime Rendering)**
  const obfuscatedUrl = ["h", "t", "t", "p", "s", ":", "/", "/", "m", "y", "p", "r", "o", "t", "e", "c", "t", "e", "d", ".", "w", "e", "b", "s", "i", "t", "e"];
  const reconstructedUrl = obfuscatedUrl.join("index.html");

  function createProtectedContent() {
    const contentDiv = document.createElement("div");
    contentDiv.id = "protected-content";
    contentDiv.style.display = "none";

    const link = document.createElement("a");
    link.href = reconstructedUrl;
    link.textContent = "Klik di sini untuk mengunjungi situs!";
    link.target = "_blank";
    link.rel = "noopener noreferrer";
    link.style.color = "blue";
    link.style.textDecoration = "none";

    link.onmouseover = () => (link.style.textDecoration = "underline");
    link.onmouseout = () => (link.style.textDecoration = "none");

    contentDiv.appendChild(link);
    document.body.appendChild(contentDiv);

    // Tampilkan konten dengan delay
    setTimeout(() => {
      contentDiv.style.display = "block";
      console.log("Konten berhasil dimuat.");
    }, 2000); // Delay 2 detik
  }

  // **2. Anti-Crawler Detection (Behavioral Checks)**
  function detectCrawler() {
    const botPatterns = [
      /bot/i,
      /spider/i,
      /crawl/i,
      /scrapy/i,
      /wget/i,
      /curl/i,
      /python/i,
    ];
    const userAgent = navigator.userAgent || "";

    // Deteksi berdasarkan user-agent
    const isBot = botPatterns.some((pattern) => pattern.test(userAgent));
    if (isBot) {
      alert("Akses ditolak: Bot terdeteksi.");
      throw new Error("Bot detected");
    }

    // Deteksi headless browser
    if (!window.navigator.webdriver && window.navigator.webdriver !== undefined) {
      alert("Akses ditolak: Headless browser terdeteksi.");
      throw new Error("Headless browser detected");
    }
  }

  // **3. Anti-Rate-Limiting**
  function rateLimitProtection() {
    let accessCount = 0;
    const maxAccess = 10; // Maksimum akses dalam waktu tertentu
    const resetTime = 60000; // Reset setiap 60 detik

    // Reset counter setiap 60 detik
    setInterval(() => {
      accessCount = 0;
    }, resetTime);

    // Batasi klik
    document.addEventListener("click", () => {
      accessCount++;
      if (accessCount > maxAccess) {
        alert("Akses terlalu banyak dalam waktu singkat. Cobalah lagi nanti.");
        throw new Error("Rate limit exceeded");
      }
    });
  }

  // **4. JavaScript Verification (Anti-Static Detection)**
  function requireJavaScript() {
    const jsDiv = document.createElement("div");
    jsDiv.id = "js-check";
    jsDiv.textContent = "JavaScript berhasil dijalankan.";
    jsDiv.style.display = "none";

    document.body.appendChild(jsDiv);
    setTimeout(() => {
      jsDiv.style.display = "block";
    }, 1000); // Tampilkan setelah 1 detik
  }

  // **5. Canvas Fingerprinting**
  function canvasFingerprintProtection() {
    try {
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      ctx.fillStyle = "red";
      ctx.fillRect(10, 10, 50, 50);
      const data = canvas.toDataURL();

      if (!data || data.length < 50) {
        alert("Akses ditolak: Fingerprinting gagal.");
        throw new Error("Canvas fingerprinting failed");
      }
    } catch (e) {
      alert("Akses ditolak: Deteksi canvas gagal.");
      throw new Error("Canvas fingerprinting error");
    }
  }

  // **6. CORS Verification**
  function verifyCORS() {
    fetch(reconstructedUrl, { method: "GET", mode: "no-cors" })
      .then(() => console.log("CORS Verification Passed"))
      .catch(() => {
        alert("Akses ditolak: Verifikasi CORS gagal.");
        throw new Error("CORS verification failed");
      });
  }

  // **7. Disable Right-Click (Optional)**
  document.addEventListener("contextmenu", (e) => {
    e.preventDefault();
    alert("Klik kanan dinonaktifkan untuk melindungi konten.");
  });

  // **8. Run All Protections**
  function runProtections() {
    detectCrawler(); // Cek bot
    rateLimitProtection(); // Lindungi dari akses berlebihan
    requireJavaScript(); // Verifikasi JavaScript
    canvasFingerprintProtection(); // Deteksi perangkat
    verifyCORS(); // CORS check
    createProtectedContent(); // Muat konten
  }

  // Jalankan proteksi setelah halaman dimuat
  document.addEventListener("DOMContentLoaded", runProtections);
})(on);